esphome:
  # includes: 
  #   - plugins/location_extras/location_extras.h
  on_boot:
    - priority: -100.0                   # pretty much everything should already be initialized
      then:
        - logger.log: "--- Waiting for hdate valid  ---"
        - wait_until:
            lambda: 'return id(hdate_valid);'
        - logger.log: --------- hdate valid ---------"
        - lambda: 'LocationExtras::onBoot();'
# frequency of data flushed to the flash
preferences:
  flash_write_interval: 2min

# Enable HTTP Requests (for auto location API)
http_request:
  useragent: esphome/device
  timeout: 10s

globals:
  - id: lat_global
    type: float
    restore_value: yes
    initial_value: ${latitude}
  - id: lon_global
    type: float
    restore_value: yes
    initial_value: ${longitude}
  # - id: lat_and_lon_global
  #   type: std::string
  #   restore_value: no
  #   initial_value: to_string(${latitude}) + "," + to_string(${longitude})

# switch:
#   # update auto detect location
#   - platform: template
#     name: ${friendly_name} Auto Detect Location
#     disabled_by_default: true
#     optimistic: yes
#     turn_on_action:
#       - lambda: 'LocationExtras::autoSetLocation();'
#     turn_off_action:
#       - text_sensor.template.publish:
#           id: lat_text_sensor
#           state: "0.0"
#       - text_sensor.template.publish:
#           id: lon_text_sensor
#           state: "0.0"
#       - text_sensor.template.publish:
#           id: auto_location_found
#           state: "Wait 2 minutes then reboot for changes to take effect"

button:
  - platform: template
    name: ${friendly_name} 05 Auto Detect Location
    on_press:
      - lambda: 'LocationExtras::autoSetLocation();'
  - platform: template
    name: ${friendly_name} 07 Revert To Defualt Location
    on_press:
      - lambda: 'LocationExtras::revertToDefaultLocation();'

text_sensor:
  # text sensor to display the location 
  - platform: template
    name: ${friendly_name} 06 Auto Location Found
    internal: true
    id: auto_location_found
    update_interval: never
    
  - platform: template
    name: ${friendly_name} 01 Latitude
    id: lat_text_sensor
    update_interval: never
    on_value:
      then:
        lambda: 'LocationExtras::onLatitudeSet(x);'
  - platform: template
    name: ${friendly_name} 02 Longitude
    id: lon_text_sensor
    update_interval: never
    on_value:
      then:
        lambda: 'LocationExtras::onLongitudeSet(x);'

number:
  - platform: template
    name: ${friendly_name} 03 Manually Set Latitude
    id: latitude_number
    optimistic: false
    min_value: -180.0000
    max_value: 180.0000
    step: .0001
    mode: box
    lambda: 'return atof(id(lat_text_sensor).state.c_str());'
    set_action:
      - lambda: 'id(lat_text_sensor).publish_state(to_string(x));'
  - platform: template
    name: ${friendly_name} 04 Manually Set Longitude
    id: longitude_number
    optimistic: false
    min_value: -180.0000
    max_value: 180.0000
    step: .0001
    mode: box
    lambda: 'return atof(id(lon_text_sensor).state.c_str());'
    set_action:
      - lambda: 'id(lon_text_sensor).publish_state(to_string(x));'
      